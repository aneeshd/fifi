/// @brief Doxygen dummy class specifying the API available at different
///        layers
class layer
{
public:

    /// @typedef field_type
    /// The finite field type used e.g. fifi::binary8 for the Finite
    /// Field 2^8.
    typedef fifi_finite_field field_type;

    /// @typedef value_type
    /// The value type storing the field elements used for the
    /// specified field. E.g. the binary extension field 2^8 uses uint8_t as
    /// the value_type.
    typedef field::value_type value_type;

    /// @typedef order_type
    /// The data type used to hold the order of the field i.e. the
    /// number of elements. E.g. binary8 uses uint32_t as the order_type.
    typedef field::order_type order_type;

    //------------------------------------------------------------------
    // BASE ARITHMETICS API
    //------------------------------------------------------------------

    /// Returns the sum of two field elements.
    /// @param a The augend.
    /// @param b The addend.
    /// @return The sum of a and b.
    value_type add(value_type a, value_type b) const;

    /// Returns the difference of two field elements.
    /// @param a The minuend.
    /// @param b The subtrahend.
    /// @return The difference of a and b.
    value_type subtract(value_type a, value_type b) const;

    /// Returns the product of two field elements.
    /// @param a The multiplicand.
    /// @param b The multiplier.
    /// @return The product of a and b.
    value_type multiply(value_type a, value_type b) const;

    /// Returns the quotient of two field elements.
    /// @param a The numerator.
    /// @param b The denominator.
    /// @return The quotient of a and b.
    value_type divide(value_type a, value_type b) const;

    /// Returns inverse of a field element.
    /// @param a Element to invert.
    /// @return The inverse of the field element.
    value_type invert(value_type a) const;

    //------------------------------------------------------------------
    // PACKED ARITHMETICS API
    //------------------------------------------------------------------

    /// Returns the sum of two field elements. If the field's value type can
    /// represent multiple elements it is assumed that multiple field elements
    /// are stored in the operands, e.g., that 8 field elements are stored in a
    /// byte-sized value type of a binary field.
    /// @param a The augend(s).
    /// @param b The addend(s).
    /// @return The sum(s) of a and b.
    value_type packed_add(value_type a, value_type b) const;

    /// Returns the difference of two field elements. If the field's value type
    /// can represent multiple elements it is assumed that multiple field
    /// elements are stored in the operands, e.g., that 8 field elements are
    /// stored in a byte-sized value type of a binary field.
    /// @param a The minuend(s).
    /// @param b The subtrahend(s).
    /// @return The difference(s) of a and b.
    value_type packed_subtract(value_type a, value_type b) const;

    /// Returns the product of two field elements. If the field's value type can
    /// represent multiple elements it is assumed that multiple field elements
    /// are stored in the operands, e.g., that 8 field elements are stored in a
    /// byte-sized value type of a binary field.
    /// @param a The multiplicand(s).
    /// @param b The multiplier(s).
    /// @return The product(s) of a and b.
    value_type packed_multiply(value_type a, value_type b) const;

    /// Returns the quotient of two field elements. If the field's value type
    /// can represent multiple elements it is assumed that multiple field
    /// elements are stored in the operands, e.g., that 8 field elements are
    /// stored in a byte-sized value type of a binary field.
    /// @param a The numerator(s).
    /// @param b The denominator(s).
    /// @return The quotient(s) of a and b.
    value_type packed_divide(value_type a, value_type b) const;

    /// Returns inverse of a field element. If the field's value type
    /// can represent multiple elements it is assumed that multiple field
    /// elements are stored in the operand, e.g., that 8 field elements are
    /// stored in a byte-sized value type of a binary field.
    /// @param a Element(s) to invert.
    /// @return The inverse of the field element(s).
    value_type packed_invert(value_type a) const;

    //------------------------------------------------------------------
    // REGION ARITHMETICS API
    //------------------------------------------------------------------

    /// Adds two field element buffers. It is assumed that the buffers contains
    /// "packed" values, i.e., that, if possible, multiple field elements are
    /// stored in the same value type.
    /// The operation is: dest = dest + src
    /// @param dest The buffer containing the augends, and the destination for
    /// the resulting sums.
    /// @param src The buffer containing the addends.
    /// @param length The length of the provided buffers.
    void region_add(value_type* dest, const value_type* src,
                    uint32_t length) const;

    /// Subtracts two field element buffers. It is assumed that the buffers
    /// contains "packed" values, i.e., that, if possible, multiple field
    /// elements are stored in the same value type.
    /// The operation is: dest = dest - src
    /// @param dest The buffer containing the minuends, and the destination for
    /// the resulting differences.
    /// @param src The buffer containing the subtrahend.
    /// @param length The length of the provided buffers.
    void region_subtract(value_type* dest, const value_type* src,
                         uint32_t length) const;


    /// Multiplies two field element buffers. It is assumed that the buffers
    /// contains "packed" values, i.e., that, if possible, multiple field
    /// elements are stored in the same value type.
    /// The operation is: dest = dest * src
    /// @param dest The buffer containing the multiplicands, and the destination
    /// for the resulting products.
    /// @param src The buffer containing the multipliers.
    /// @param length The length of the provided buffers.
    void region_multiply(value_type* dest, const value_type* src,
                         uint32_t length) const;


    /// Divides two field element buffers. It is assumed that the buffers
    /// contains "packed" values, i.e., that, if possible, multiple field
    /// elements are stored in the same value type.
    /// The operation is: dest = dest / src
    /// @param dest The buffer containing the numerators, and the destination
    /// for the resulting quotients.
    /// @param src The buffer containing the denominators.
    /// @param length The length of the provided buffers.
    void region_divide(value_type* dest, const value_type* src,
                       uint32_t length) const;

    /// Multiplies a field element buffer with a constant. It is assumed that
    /// the buffer contains "packed" values, i.e., that, if possible, multiple
    /// field elements are stored in the same value type.
    /// The operation is: dest = dest * constant
    /// @param dest The buffer containing the multiplicands, and the destination
    /// for the resulting products.
    /// @param constant The constant multiplier.
    /// @param length The length of the provided buffers.
    void region_multiply_constant(value_type* dest, value_type constant,
                                  uint32_t length) const;

    /// Multiplies a field element buffer with a constant, and afterwards adds
    /// the product to a second buffer. It is assumed that the buffers contains
    /// "packed" values, i.e., that, if possible, multiple field elements are
    /// stored in the same value type.
    /// The operation is: dest = dest + (constant * src)
    /// @param dest The buffer containing the augends, and the destination for
    /// the resulting sums.
    /// @param src The buffer containing the multiplicands.
    /// @param constant The constant multiplier.
    /// @param length The length of the provided buffers.
    void region_multiply_add(value_type* dest, const value_type* src,
                             value_type constant, uint32_t length) const;

    /// Multiplies a field element buffer with a constant, and afterwards
    /// subtracts the product from a second buffer. It is assumed that the
    /// buffers contains "packed" values, i.e., that, if possible, multiple
    /// field elements are stored in the same value type.
    /// The operation is: dest = dest - (constant * src)
    /// @param dest The buffer containing the minuends, and the destination for
    /// the resulting differences.
    /// @param src The buffer containing the multiplicands.
    /// @param constant The constant multiplier.
    /// @param length The length of the provided buffers.
    void region_multiply_subtract(value_type* dest, const value_type* src,
                                  value_type constant, uint32_t length) const;

    //------------------------------------------------------------------
    // REGION INFO API
    //------------------------------------------------------------------

    /// @return The default region alignment required for the buffers used in
    /// the finite field computations. The buffers passed to the arithmetic
    /// functions should have their memory aligned according to the value
    /// returned by this function.
    uint32_t alignment() const;

    /// @return The maximum region alignment requirement of the stack. By
    /// complying with this requirement the highest performance can be achieved.
    uint32_t max_alignment() const;

    /// @return The buffer length granularity, i.e., length (number of
    /// value_type elements) by which the buffer must be divisible.
    uint32_t granularity() const;

    /// @return The maximum granularity requirement of the stack. By complying
    /// with this requirement the highest performance can be achieved.
    uint32_t max_granularity() const;

    //------------------------------------------------------------------
    // REGION DISPATCHER API
    //------------------------------------------------------------------

    /// @return A function bound to a layer::region_add() compatible
    /// function
    call_region_add dispatch_region_add() const;

    /// @return A function bound to a layer::region_subtract()
    /// compatible function
    call_region_subtract dispatch_region_subtract() const;

    /// @return A function bound to a layer::region_divide()
    /// compatible function
    call_region_divide dispatch_region_divide() const;

    /// @return A function bound to a layer::region_multiply()
    /// compatible function
    call_region_multiply dispatch_region_multiply() const;

    /// @return A function bound to a
    /// layer::region_multiply_constant() compatible function
    call_region_multiply_constant dispatch_region_multiply_constant() const;

    /// @return A function bound to a layer::region_multiply_add()
    /// compatible function
    call_region_multiply_add dispatch_region_multiply_add() const;

    /// @return A function bound to a
    /// layer::region_multiply_subtract() compatible function
    call_region_multiply_subtract dispatch_region_multiply_subtract() const;
};
