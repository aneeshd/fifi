/// @brief Doxygen dummy class specifying the API available at different
///        layers
class layer
{
public:

    /// @typedef field_type
    /// The finite field type used e.g. fifi::binary8 for the Finite
    /// Field 2^8
    typedef fifi_finite_field field_type;

    /// @typedef value_type
    /// The value type storing the field elements used for the
    /// specified field. E.g. the binary extension field 2^8 uses uint8_t as
    /// the value_type.
    typedef field::value_type value_type;

    /// @typedef order_type
    /// The data type used to hold the order of the field i.e. the
    /// number of elements. E.g. binary8 uses uint32_t as the order_type
    typedef field::order_type order_type;

    //------------------------------------------------------------------
    // BASE ARITHMETICS API
    //------------------------------------------------------------------

    /// Get the addition of two field elements
    /// @param a First operand to add
    /// @param b Second operand to add
    /// @return Addition result
    value_type add(value_type a, value_type b) const;

    /// Get the subtraction of two field elements
    /// @param a First operand to subtract from
    /// @param b Second operand to subtract
    /// @return Subtraction result
    value_type subtract(value_type a, value_type b) const;

    /// Get the multiplication of two field elements
    /// @param a First operand to multiply
    /// @param b Second operand to multiply
    /// @return Multiplication result
    value_type multiply(value_type a, value_type b) const;

    /// Get the division of two field elements
    /// @param a Numerator
    /// @param b Denominator
    /// @return Division result
    value_type divide(value_type numerator, value_type denominator) const;

    /// Get the inverse of a field element
    /// @param a Element to invert
    /// @return Inversion result
    value_type invert(value_type a) const;

    //------------------------------------------------------------------
    // PACKED ARITHMETICS API
    //------------------------------------------------------------------

    /// Get the addition of two field elements when the data type might not
    /// represents a field element, i.e. not using the whole bits of the type.
    /// @param a First operand to add
    /// @param b Second operand to add
    /// @return Addition result
    value_type packed_add(value_type a, value_type b) const;

    /// Get the subtraction of two field elements when the data type might not
    /// represents a field element, i.e. not using the whole bits of the type.
    /// @param a First operand to subtract from
    /// @param b Second operand to subtract
    /// @return Subtraction result
    value_type packed_subtract(value_type a, value_type b) const;

    /// Get the multiplication of two field elements when the data type might
    /// not represents a field element, i.e. not using the whole bits of the
    /// type.
    /// @param a First operand to multiply
    /// @param b Second operand to multiply
    /// @return Multiplication result
    value_type packed_multiply(value_type a, value_type b) const;

    /// Get the division of two field elements when the data type might not
    /// represents a field element, i.e. not using the whole bits of the type.
    /// @param numerator First operand to divide
    /// @param denominator Second operand to divide
    /// @return Division result
    value_type packed_divide(value_type numerator,
                             value_type denominator) const;

    /// Get the inverse of a field element when the data type might not
    /// represent a field element, i.e. not using the whole bits of the type.
    /// @param a Element to invert
    /// @return Inversion result
    value_type packed_invert(value_type a) const;

    //------------------------------------------------------------------
    // REGION ARITHMETICS API
    //------------------------------------------------------------------

    /// Get the addition of two memory regions composed of field elements
    /// instead of field elements itself. It is assumed regions are "packed"
    /// as mentioned in the packed arithmetics API
    /// @param dest Pointer to value_type for the destination memory block
    /// @param src Const pointer to value_type for the source memory block
    /// @param length Length of the provided buffers
    void region_add(value_type* dest, const value_type* src,
                    uint32_t length) const;

    /// Get the subtract of two memory regions composed of field elements
    /// instead of field elements itself. It is assumed regions are "packed"
    /// as mentioned in the packed arithmetics API
    /// @param dest Pointer to value_type for the destination memory block
    /// @param src Const pointer to value_type for the source memory block
    /// @param length Length of the provided buffers
    void region_subtract(value_type* dest, const value_type* src,
                         uint32_t length) const;


    /// Get the multiplication of two memory regions composed of field elements
    /// instead of field elements itself. It is assumed regions are "packed"
    /// as mentioned in the packed arithmetics API
    /// @param dest Pointer to value_type for the destination memory block
    /// @param src Const pointer to value_type for the source memory block
    /// @param length Length of the provided buffers
    void region_multiply(value_type* dest, const value_type* src,
                         uint32_t length) const;


    /// Get the division of two memory regions composed of field elements
    /// instead of field elements itself. It is assumed regions are "packed"
    /// as mentioned in the packed arithmetics API
    /// @param dest Pointer to value_type for the destination memory block
    /// @param src Const pointer to value_type for the source memory block
    /// @param length Length of the provided buffers
    void region_divide(value_type* dest, const value_type* src,
                       uint32_t length) const;

    /// Get the multiplication of a memory region composed of field elements
    /// instead of field elements itself. It is assumed regions are "packed"
    /// as mentioned in the packed arithmetics API
    /// @param dest Pointer to value_type for the destination memory block
    /// @param constant Constant of type value_type to be multiplied on dest
    /// @param length Length of the provided buffers
    void region_multiply_constant(value_type* dest, value_type constant,
                                  uint32_t length) const;

    /// Get the multiplication with a constant and addition of two memory
    /// regions composed of field elements instead of field elements itself.
    /// It is assumed regions are "packed" as mentioned in the packed
    /// arithmetics API. The operation is: dest = dest + (constant * src)
    /// @param dest Pointer to value_type for the destination memory block
    /// @param src Const pointer to value_type for the source memory block
    /// @param constant Constant of type value_type to be multiplied on src
    /// @param length Length of the provided buffers
    void region_multiply_add(value_type* dest, const value_type* src,
                             value_type constant, uint32_t length) const;

    /// Get the multiplication with a constant and subtraction of two memory
    /// regions composed of field elements instead of field elements itself.
    /// It is assumed regions are "packed" as mentioned in the packed
    /// arithmetics API. The operation is: dest = dest - (constant * src)
    /// @param dest Pointer to value_type for the destination memory block
    /// @param src Const pointer to value_type for the source memory block
    /// @param constant Constant of type value_type to be multiplied on src
    /// @param length Length of the provided buffers
    void region_multiply_subtract(value_type* dest, const value_type* src,
                                  value_type constant, uint32_t length) const;

    //------------------------------------------------------------------
    // REGION INFO API
    //------------------------------------------------------------------

    /// @return The default region alignment required for the buffers used in
    /// the finite field computations. The buffers passed to the arithmetic
    /// functions should have their memory aligned according to the value
    /// returned by this function.
    uint32_t alignment() const;

    /// @return The maximum region alignment requirement of the stack. By
    /// complying with this requirement the highest performance can be achieved.
    uint32_t max_alignment() const;

    /// @return The buffer length granularity, i.e., length (number of
    /// value_type elements) by which the buffer must be divisible.
    uint32_t granularity() const;

    /// @return The maximum granularity requirement of the stack. By complying
    /// with this requirement the highest performance can be achieved.
    uint32_t max_granularity() const;

    //------------------------------------------------------------------
    // REGION DISPATCHER API
    //------------------------------------------------------------------

    /// @return A function bound to a layer::region_add() compatible
    /// function
    call_region_add dispatch_region_add() const;

    /// @return A function bound to a layer::region_subtract()
    /// compatible function
    call_region_subtract dispatch_region_subtract() const;

    /// @return A function bound to a layer::region_divide()
    /// compatible function
    call_region_divide dispatch_region_divide() const;

    /// @return A function bound to a layer::region_multiply()
    /// compatible function
    call_region_multiply dispatch_region_multiply() const;

    /// @return A function bound to a
    /// layer::region_multiply_constant() compatible function
    call_region_multiply_constant dispatch_region_multiply_constant() const;

    /// @return A function bound to a layer::region_multiply_add()
    /// compatible function
    call_region_multiply_add dispatch_region_multiply_add() const;

    /// @return A function bound to a
    /// layer::region_multiply_subtract() compatible function
    call_region_multiply_subtract dispatch_region_multiply_subtract() const;
};
